// Todo App

// Requirements:

TodoApp function
// - Create multiple or single instance of a Todo App
// - Each Todo app must be able to:
// - Create new task
// - Toggle task from done to incomplete
// - Delete tasks
// - Update tasks
// - Read tasks
// Task CRUD
// - Entities:
//  - TodoApp
//  - Task => Schema { title, status [done|incomplete], id, [dueDate, priority] }




//YLOPOIHSH

//function Task(){
  // Own properties: id, title, status
//}
// Public properties
// Task.prototype.delete?
// Task.prototype.patchTask = ...

//TodoApp.taskCounter= 0;
// Public properties
// TodoApp.prototype.getTasks = ...
// TodoApp.prototype.addTask
// TodoApp.prototype.getTaskById
// TodoApp.prototype.deleteTaskById

//const todoApp1 = new TodoApp();
//console.log(todoApp1);
// CRUD Operations
//const tasks = todoApp1.getTasks(); // return [], Date? OK
// View tasks
// What about todoApp1.getTasksCount()? OK
// const task1 = todoApp1.addTask({ title: "Learn JS", status: "incomplete"}); // C OK
// ids must be automatically added from the constructor? Incremental id (counter)? 
// const t1 = todoApp1.getTaskById(1); // R OK
// task1.patchTask({ status: "done" }); // U OK
// task1.delete(); // D




TODO 5/10
1) In getTaskInfoById() and changeTaskStatus() and removeTaskbyID() replace the for loops with the .find() method
2) Make Menu Choice OK
3) Dates (regex) OK
4)FIX BUGS (INPUT VALIDATION) (30% OK)


TODO 6/10
1) Implement the Task Count property. OK
2) In getTaskInfoById() and changeTaskStatus() and removeTaskbyID() replace the for loops with the .find() method OK
3) Fix date validation (find a way to do only dates later than the one you're rn). Either make a good regex (look at regex 101 guides), or try playing with the dates.
4) FIX BUGS (INPUT VALIDATION)

TODO 7/10
1) Fix date validation (find a way to do only dates later than the one you're rn). Either make a good regex (look at regex 101 guides), or try playing with the date object. OK
2) FIX BUGS (INPUT VALIDATION) ALMOST OK
3) In the main Function, make one more function for the sub-menu (so there's less nesting) OK

TODO 9/10
1) Add file saving and reading OK
2) Check for any remaining bugs
3) Clean Code

TODO 9/10 EXTENDED
1) Fix the bug with the ID's (make a .txt file that always contains the last Task ID) OK
2) Check for any remaining bugs
3) Clean Code

Todo 16/10
1) Make the App Multiton: On the main menu, add 2 new options: A) Have the user make a new TodoListApp with a name of their choice 2)Select a todoList by name. 
For the first option, I will have the user type a name, will check if it's null/empty and if not, it will make a new file with that name + Tasks. Ex: work -> workTasks.json.
For the last id, it will have the name + LastId. Ex: work -> workLastId.txt.
Lastly, a special file named `TodoApps.txt` will be updated with the name the user inserted. It will basically contain an Array with all the TodoApps the user has created. Ex: [`work`,  `home`, `college`]

As for the second option, the special file (todoApps.txt) will be read with a for..of loop, after the user has inserted a name. If found, the object will be made (new TodoApp()) and all the required iles will be read.
The users will have the option to switch to an other TodoApp() if they desire to. Lastly, the name of the todoApp will be passed as an arguement to the constructor. Ex: new TodoApp(`work`);

FOR BOTH, there will be an option for the user to delete a ToDoApp() by giving its name.

2) Check for bugs and make the code as clean as possible.
